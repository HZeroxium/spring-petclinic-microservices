// ci-cd/preview/Jenkinsfile

// === GLOBAL VARIABLES ===
def GIT_REPO = 'https://github.com/HZeroxium/spring-petclinic-microservices'
def CONFIG_REPO = 'https://github.com/HZeroxium/spring-petclinic-microservices-config'
def SERVICE_PORTS = [
  'vets-service': 8083,
  'visits-service': 8082,
  'customers-service': 8081,
  'api-gateway': 8080,
  'admin-server': 9090,
  'config-server': 8888,
  'discovery-server': 8761,
  'genai-service': 8084
]

pipeline {
  agent any

  parameters {
    string(name: 'FEATURE_NAME', defaultValue: 'test-vet-1', description: 'Enter feature name to preview (can be any name)')
    choice(name: 'SERVICE_NAME', choices: ['vets-service', 'visits-service', 'customers-service', 'api-gateway', 'admin-server', 'config-server', 'discovery-server', 'genai-service'], description: 'Select service to deploy')
    string(name: 'BRANCH', defaultValue: 'preview_cleanup', description: 'Branch code')
  }

  options {
    timeout(time: 30, unit: 'MINUTES')
    disableConcurrentBuilds()
  }

  stages {
    stage('Validate Parameters') {
      steps {
        script {
          echo "üîç Validating parameters..."
          if (!params.FEATURE_NAME?.trim()) {
            error "Feature name cannot be empty"
          }
          if (!params.SERVICE_NAME?.trim()) {
            error "Service name cannot be empty"
          }
          if (!params.BRANCH?.trim()) {
            error "Branch name cannot be empty"
          }

          // Global TEMP_DIR used across stages
          TEMP_DIR = "${env.WORKSPACE}/temp-${env.BUILD_NUMBER}"
          sh "mkdir -p ${TEMP_DIR}"
        }
      }
    }

    stage('Checkout & Validate Branch') {
      steps {
        script {
          echo "üìÇ Checking out code from ${params.BRANCH}..."

          try {
            dir("${TEMP_DIR}/${params.SERVICE_NAME}") {
              checkout([$class: 'GitSCM',
                branches: [[name: "${params.BRANCH}"]],
                extensions: [[$class: 'CloneOption', depth: 1, noTags: false, shallow: true]],
                userRemoteConfigs: [[url: "${GIT_REPO}"]]
              ])

              if (!fileExists("Dockerfile") && !fileExists("../Dockerfile")) {
                error "Dockerfile not found in service directory or parent directory"
              }

              IMAGE_TAG = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
              echo "‚úÖ Using commit: ${IMAGE_TAG}"
            }
          } catch (Exception e) {
            error "Failed to checkout branch: ${e.message}"
          }
        }
      }
    }

    stage('Build Jar') {
      steps {
        script {
          echo "üß± Packaging service with Maven..."
          dir("${TEMP_DIR}/${params.SERVICE_NAME}") {
            sh '../mvnw package -DskipTests'
          }
        }
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        script {
          echo "üê≥ Building Docker image..."
          def image = "hzeroxium/spring-petclinic-${params.SERVICE_NAME}"
          def imageWithTag = "${image}:${IMAGE_TAG}"
          def dockerfileLocation = ""
          def servicePort = SERVICE_PORTS[params.SERVICE_NAME] ?: 8080

          if (fileExists("${TEMP_DIR}/${params.SERVICE_NAME}/Dockerfile")) {
            dockerfileLocation = "${TEMP_DIR}/${params.SERVICE_NAME}/Dockerfile"
          } else {
            dockerfileLocation = "${TEMP_DIR}/Dockerfile"
          }

          try {
            withCredentials([usernamePassword(credentialsId: 'hzeroxium-dockerhub',
              usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASSWORD')]) {

              sh "docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}"

              def shortServiceName = params.SERVICE_NAME.replaceFirst("spring-petclinic-", "")

              sh """
                cd ${TEMP_DIR}
                docker build \
                  --build-arg SERVICE_NAME=${shortServiceName} \
                  --build-arg EXPOSED_PORT=${servicePort} \
                  -t ${imageWithTag} \
                  -t ${image}:latest \
                  -f ${dockerfileLocation} .
              """

              sh "docker push ${imageWithTag}"
              sh "docker push ${image}:latest"

              sh "docker rmi ${imageWithTag} || true"
              sh "docker rmi ${image}:latest || true"
            }
          } catch (Exception e) {
            error "Docker build/push failed: ${e.message}"
          }
        }
      }
    }

    stage('Update GitOps Configuration') {
      steps {
        script {
          echo "üîÑ Updating GitOps configuration..."
          def fea = params.FEATURE_NAME
          def svc = params.SERVICE_NAME
          def commitId = IMAGE_TAG
          def servicePort = SERVICE_PORTS[svc] ?: 8080
          def configRepoPath = "${TEMP_DIR}/config-repo"

          try {
            sh "rm -rf ${configRepoPath}"

            withCredentials([usernamePassword(credentialsId: 'github-credentials',
              usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {

              sh """
                git clone https://${GIT_USER}:${GIT_PASS}@github.com/HZeroxium/spring-petclinic-microservices-config.git ${configRepoPath}
              """

              dir(configRepoPath) {
                sh "mkdir -p values/preview/${fea}"
                sh "mkdir -p apps/preview/${fea}"

                writeFile file: "values/preview/${fea}/values-${svc}.yaml", text: """
image:
  repository: hzeroxium/spring-petclinic-${svc}
  tag: "${commitId}"
  pullPolicy: IfNotPresent

replicas: 1

service:
  port: ${servicePort}
  type: ClusterIP

env:
  - name: SPRING_PROFILES_ACTIVE
    value: docker
  - name: CONFIG_SERVER_URL
    value: http://config-server.petclinic-dev.svc.cluster.local:8888
  - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
    value: http://discovery-server.petclinic-dev.svc.cluster.local:8761/eureka
"""

                writeFile file: "values/preview/${fea}/ingress.yaml", text: """
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${fea}-ingress
  namespace: preview-${fea}
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: ${fea}.petclinic.local
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: ${svc}
                port:
                  number: ${servicePort}
"""

                sh """
                  git config user.name "jenkins"
                  git config user.email "jenkins@company.com"
                  git add .
                  git commit -m "[Preview] ${fea}: ${svc} -> ${commitId}"
                  git push
                """

                echo "‚úÖ GitOps configuration updated successfully"
              }
            }
          } catch (Exception e) {
            error "Failed to update GitOps config: ${e.message}"
          }
        }
      }
    }
  }

  post {
    success {
      echo """
      üéâ PREVIEW ENVIRONMENT READY! üéâ

      Service: ${params.SERVICE_NAME}
      Feature: ${params.FEATURE_NAME}
      URL: http://${params.FEATURE_NAME}.petclinic.local

      The preview environment will be automatically updated by ArgoCD.
      """
    }
    failure {
      echo "‚ùå Pipeline failed! Check the logs for details."
    }
    always {
      sh "rm -rf ${TEMP_DIR} || true"
    }
  }
}
