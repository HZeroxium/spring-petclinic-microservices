// ci-cd/preview/Jenkinsfile
//
// This Jenkinsfile is used to build and deploy a single Spring Boot microservice (from a monorepo)
// to a preview environment, leveraging a GitOps approach with ArgoCD.
//
// --- GLOBAL DEFS ---
def GIT_REPO = 'https://github.com/HZeroxium/spring-petclinic-microservices'
def CONFIG_REPO = 'https://github.com/HZeroxium/spring-petclinic-microservices-config'

// Map of services to their default exposed ports
def SERVICE_PORTS = [
  'vets-service'       : 8083,
  'visits-service'     : 8082,
  'customers-service'  : 8081,
  'api-gateway'        : 8080,
  'admin-server'       : 9090,
  'config-server'      : 8888,
  'discovery-server'   : 8761,
  'genai-service'      : 8084
]

// We explicitly declare these to avoid Jenkins warnings about missing `def`
def TEMP_DIR = ''
def IMAGE_TAG = ''

pipeline {
  agent any

  parameters {
    string(
      name: 'FEATURE_NAME',
      defaultValue: 'test-vet-1',
      description: 'Enter a feature name to be used for the preview environment (e.g., "test-vet-1")'
    )
    choice(
      name: 'SERVICE_NAME',
      choices: [
        'vets-service',
        'visits-service',
        'customers-service',
        'api-gateway',
        'admin-server',
        'config-server',
        'discovery-server',
        'genai-service'
      ],
      description: 'Select which service to deploy to the preview environment'
    )
    string(
      name: 'BRANCH',
      defaultValue: 'preview_cleanup',
      description: 'Branch name to be checked out from the monorepo'
    )
  }

  options {
    timeout(time: 30, unit: 'MINUTES')    // Limit overall run time
    disableConcurrentBuilds()             // Disallow concurrent runs of the same job
  }

  stages {

    stage('Validate Parameters') {
      steps {
        script {
          echo "üîç Validating parameters..."

          // Basic parameter checks
          if (!params.FEATURE_NAME?.trim()) {
            error "FEATURE_NAME cannot be empty."
          }
          if (!params.SERVICE_NAME?.trim()) {
            error "SERVICE_NAME cannot be empty."
          }
          if (!params.BRANCH?.trim()) {
            error "BRANCH cannot be empty."
          }

          // Prepare a temporary directory for all operations
          TEMP_DIR = "${env.WORKSPACE}/temp-${env.BUILD_NUMBER}"
          sh "mkdir -p ${TEMP_DIR}"

          echo "‚úÖ Parameters look good. TEMP_DIR created at: ${TEMP_DIR}"
        }
      }
    }

    stage('Checkout & Validate Branch') {
      steps {
        script {
          echo "üìÇ Checking out code from branch: ${params.BRANCH}"

          // We clone only the folder of the service to speed up the build,
          // but it means the mvnw script is two levels up from the service folder
          dir("${TEMP_DIR}/${params.SERVICE_NAME}") {
            checkout([
              $class: 'GitSCM',
              branches: [[name: "${params.BRANCH}"]],
              extensions: [
                // Shallow clone to reduce bandwidth
                [$class: 'CloneOption', depth: 1, noTags: false, shallow: true],
              ],
              userRemoteConfigs: [[url: "${GIT_REPO}"]]
            ])

            // Ensure we have a valid commit
            IMAGE_TAG = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
            echo "‚úÖ Using commit: ${IMAGE_TAG}"

            // Check for Dockerfile presence (either in service directory or parent)
            if (!fileExists("Dockerfile") && !fileExists("../Dockerfile")) {
              error "Dockerfile not found in the service folder or its parent directory."
            }
          }
        }
      }
    }

    stage('Build Jar') {
      steps {
        script {
          echo "üß± Packaging service with Maven..."
          // Since we did a partial checkout into TEMP_DIR/SERVICE_NAME,
          // the `mvnw` file is now 2 levels up.
          dir("${TEMP_DIR}/${params.SERVICE_NAME}") {
            sh '../../mvnw package -DskipTests'
          }
        }
      }
    }

    stage('Build & Push Docker Image') {
      steps {
        script {
          echo "üê≥ Building and pushing Docker image..."

          def image        = "hzeroxium/spring-petclinic-${params.SERVICE_NAME}"
          def imageWithTag = "${image}:${IMAGE_TAG}"
          def servicePort  = SERVICE_PORTS[params.SERVICE_NAME] ?: 8080

          try {
            // Log in to DockerHub
            withCredentials([usernamePassword(
              credentialsId: 'hzeroxium-dockerhub',
              usernameVariable: 'DOCKERHUB_USER',
              passwordVariable: 'DOCKERHUB_PASSWORD'
            )]) {
              sh "docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}"
            }

            // Change working directory to the service folder for proper build context.
            dir("${TEMP_DIR}/${params.SERVICE_NAME}") {
              // Dynamically compute the artifact name from the target directory.
              // Assumes the built JAR is located under "spring-petclinic-${SERVICE_NAME}/target"
              def artifactName = sh(script: "ls spring-petclinic-${params.SERVICE_NAME}/target | grep -E '.jar\$' | grep -v 'original' | head -n 1", returnStdout: true).trim()
              echo "Artifact name: ${artifactName}"

              sh """
                docker build \\
                  --build-arg SERVICE_NAME=${params.SERVICE_NAME} \\
                  --build-arg EXPOSED_PORT=${servicePort} \\
                  --build-arg ARTIFACT_NAME=${artifactName} \\
                  -t ${imageWithTag} \\
                  -t ${image}:latest \\
                  .
              """
            }

            sh "docker push ${imageWithTag}"
            sh "docker push ${image}:latest"
            sh "docker rmi ${imageWithTag} || true"
            sh "docker rmi ${image}:latest || true"

          } catch (Exception e) {
            error "Docker build/push failed: ${e.message}"
          }
        }
      }
    }

    stage('Update GitOps Configuration') {
      steps {
        script {
          echo "üîÑ Updating GitOps configuration (ArgoCD) repository..."
          def featureName   = params.FEATURE_NAME
          def serviceName   = params.SERVICE_NAME
          def commitId      = IMAGE_TAG
          def servicePort   = SERVICE_PORTS[serviceName] ?: 8080
          def configRepoDir = "${TEMP_DIR}/config-repo"

          try {
            // Remove old config repo directory if it exists
            sh "rm -rf ${configRepoDir}"

            withCredentials([usernamePassword(
              credentialsId: 'github-credentials',
              usernameVariable: 'GIT_USER',
              passwordVariable: 'GIT_PASS'
            )]) {
              // Clone the GitOps config repo
              sh """
                git clone https://${GIT_USER}:${GIT_PASS}@github.com/HZeroxium/spring-petclinic-microservices-config.git ${configRepoDir}
              """

              dir(configRepoDir) {
                // Create or ensure existence of preview folders
                sh "mkdir -p values/preview/${featureName}"
                sh "mkdir -p apps/preview/${featureName}"

                // Write a dedicated YAML for this service in the preview environment
                writeFile file: "values/preview/${featureName}/values-${serviceName}.yaml", text: """
image:
  repository: hzeroxium/spring-petclinic-${serviceName}
  tag: "${commitId}"
  pullPolicy: IfNotPresent

replicas: 1

service:
  port: ${servicePort}
  type: ClusterIP

env:
  - name: SPRING_PROFILES_ACTIVE
    value: docker
  - name: CONFIG_SERVER_URL
    value: http://config-server.petclinic-dev.svc.cluster.local:8888
  - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
    value: http://discovery-server.petclinic-dev.svc.cluster.local:8761/eureka
"""

                // (Optional) Provide an Ingress example if needed
                writeFile file: "values/preview/${featureName}/ingress.yaml", text: """
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${featureName}-ingress
  namespace: preview-${featureName}
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: ${featureName}.petclinic.local
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: ${serviceName}
                port:
                  number: ${servicePort}
"""

                // Commit and push changes to GitOps repo
                sh """
                  git config user.name "jenkins"
                  git config user.email "jenkins@company.com"
                  git add .
                  git commit -m "[Preview] ${featureName}: ${serviceName} -> ${commitId}" || echo "No changes to commit."
                  git push || echo "Nothing to push."
                """

                echo "‚úÖ GitOps configuration updated successfully"
              }
            }

          } catch (Exception e) {
            error "Failed to update GitOps config: ${e.message}"
          }
        }
      }
    }
  }

  post {
    success {
      echo """
      üéâ PREVIEW ENVIRONMENT READY!

      Service: ${params.SERVICE_NAME}
      Feature: ${params.FEATURE_NAME}
      URL: http://${params.FEATURE_NAME}.petclinic.local

      The preview environment will be automatically updated by ArgoCD.
      """
    }
    failure {
      echo "‚ùå Pipeline failed! Check the logs for details."
    }
    always {
      script {
        // Clean up workspace
        sh "rm -rf ${TEMP_DIR} || true"
      }
    }
  }
}
